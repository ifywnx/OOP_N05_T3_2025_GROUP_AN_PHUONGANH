package com.example.servingwebcontent.config;

import com.example.servingwebcontent.model.*;
import com.example.servingwebcontent.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

/**
 * üå± Enhanced Data Seeder - 20 Diverse Bakery Products
 * 
 * T·∫°o 20 s·∫£n ph·∫©m ti·ªám b√°nh ƒëa d·∫°ng v·ªõi h√¨nh ·∫£nh th·∫≠t t·ª´ Unsplash:
 * - 6 B√°nh Kem cao c·∫•p (Tiramisu, Red Velvet, Chocolate, Cheesecake...)
 * - 5 B√°nh Ng·ªçt Ph√°p (Croissant, Macaron, √âclair, Muffin...)
 * - 4 B√°nh M√¨ ƒë·∫∑c bi·ªát (Sandwich, Bagel...)
 * - 3 ƒê·ªì U·ªëng premium (Espresso, Tr√† s·ªØa...)
 * - 2 B√°nh Quy artisan
 */
@Component
public class DataSeeder implements CommandLineRunner {

    @Autowired private SanPhamRepository sanPhamRepository;
    @Autowired private KhachHangRepository khachHangRepository;
    @Autowired private NhanVienRepository nhanVienRepository;
    @Autowired private GiaoDichRepository giaoDichRepository;

    private final Random random = new Random();

    @Override
    @Transactional
    public void run(String... args) throws Exception {
        System.out.println("\nüå± Starting Enhanced Data Seeding...");
        
        // Check if data already exists
        if (sanPhamRepository.count() > 0) {
            System.out.println("üìä Data already exists. Skipping seeding.");
            return;
        }

        try {
            createBanhKemProducts();
            createBanhNgotProducts();
            createBanhMiProducts();
            createDoUongProducts();
            createBanhQuyProducts();
            createSampleCustomers();
            createSampleEmployees();
            createSampleTransactions();
            
            System.out.println("‚úÖ Enhanced data seeding completed successfully!");
            printDetailedSummary();
            
        } catch (Exception e) {
            System.err.println("‚ùå Error during data seeding: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * üéÇ T·∫°o 6 B√°nh Kem Premium
     */
    private void createBanhKemProducts() {
        System.out.println("üéÇ Creating premium cakes...");
        
        List<Object[]> cakeData = Arrays.asList(
            new Object[]{"BK001", "B√°nh Kem Tiramisu ƒê·∫∑c Bi·ªát", "B√°nh kem Tiramisu authentic v·ªõi c√† ph√™ Espresso √ù v√† mascarpone cheese nh·∫≠p kh·∫©u", 180000.0, 120000.0, 15, LocalDate.now().plusDays(3), "Italian Bakery"},
            new Object[]{"BK002", "B√°nh Kem Red Velvet Luxury", "B√°nh kem Red Velvet v·ªõi cream cheese frosting v√† trang tr√≠ hoa h·ªìng t∆∞∆°i", 220000.0, 150000.0, 12, LocalDate.now().plusDays(3), "French Bakery"},
            new Object[]{"BK003", "B√°nh Kem Chocolate Truffle", "B√°nh kem chocolate ƒë·∫≠m ƒë√† v·ªõi truffle ganache v√† gold leaf decoration", 250000.0, 170000.0, 8, LocalDate.now().plusDays(2), "Swiss Chocolate"},
            new Object[]{"BK004", "B√°nh Kem Cheesecake Blueberry", "New York style cheesecake v·ªõi blueberry compote t∆∞∆°i v√† graham crust", 200000.0, 140000.0, 10, LocalDate.now().plusDays(4), "American Bakery"},
            new Object[]{"BK005", "B√°nh Kem Matcha Nh·∫≠t B·∫£n", "B√°nh kem matcha authentic v·ªõi b·ªôt tr√† xanh Uji cao c·∫•p v√† whipped cream", 230000.0, 160000.0, 6, LocalDate.now().plusDays(2), "Tokyo Sweets"},
            new Object[]{"BK006", "B√°nh Kem D√¢u T√¢y Ph√°p", "B√°nh kem v·ªõi d√¢u t√¢y ƒê√† L·∫°t t∆∞∆°i, vanilla cream v√† sponge cake m·ªÅm", 190000.0, 130000.0, 14, LocalDate.now().plusDays(3), "Le Petit Gateau"}
        );

        for (Object[] data : cakeData) {
            createSanPham(data, SanPham.DanhMucSanPham.BANH_KEM);
        }
    }

    /**
     * üßÅ T·∫°o 5 B√°nh Ng·ªçt Ph√°p & Muffins
     */
    private void createBanhNgotProducts() {
        System.out.println("üßÅ Creating French pastries & sweets...");
        
        List<Object[]> pastryData = Arrays.asList(
            new Object[]{"BN001", "Croissant B∆° Ph√°p", "Croissant truy·ªÅn th·ªëng v·ªõi 64 l·ªõp b∆°, n∆∞·ªõng golden crispy theo c√¥ng th·ª©c Ph√°p", 45000.0, 25000.0, 25, LocalDate.now().plusDays(1), "Boulangerie Paris"},
            new Object[]{"BN002", "Macaron Rainbow Set", "Set 12 macaron v·ªõi 6 v·ªã: vanilla, chocolate, strawberry, matcha, lavender, rose", 320000.0, 200000.0, 8, LocalDate.now().plusDays(5), "Maison Macaron"},
            new Object[]{"BN003", "√âclair Chocolate Premium", "√âclair v·ªõi choux pastry, chocolate ganache v√† gold decoration", 85000.0, 50000.0, 15, LocalDate.now().plusDays(2), "French Patisserie"},
            new Object[]{"BN004", "Muffin Blueberry T∆∞∆°i", "Muffin v·ªõi blueberry M·ªπ t∆∞∆°i v√† streusel topping gi√≤n tan", 45000.0, 25000.0, 20, LocalDate.now().plusDays(2), "Morning Bakery"},
            new Object[]{"BN005", "Cupcake Double Chocolate", "Cupcake chocolate v·ªõi chocolate ganache frosting v√† chocolate chips", 38000.0, 22000.0, 25, LocalDate.now().plusDays(2), "Sweet Treats"}
        );

        for (Object[] data : pastryData) {
            createSanPham(data, SanPham.DanhMucSanPham.BANH_NGOT);
        }
    }

    /**
     * ü•ñ T·∫°o 4 B√°nh M√¨ ƒê·∫∑c Bi·ªát
     */
    private void createBanhMiProducts() {
        System.out.println("ü•ñ Creating specialty breads...");
        
        List<Object[]> breadData = Arrays.asList(
            new Object[]{"BM001", "Croissant Jambon Fromage", "Croissant v·ªõi jambon Ph√°p v√† fromage Gruy√®re, n∆∞·ªõng gi√≤n", 65000.0, 35000.0, 20, LocalDate.now().plusDays(1), "Deli Express"},
            new Object[]{"BM002", "Bagel C√° H·ªìi N∆∞·ªõng", "Bagel v·ªõi c√° h·ªìi Na Uy, cream cheese v√† capers", 95000.0, 60000.0, 12, LocalDate.now().plusDays(1), "Nordic Deli"},
            new Object[]{"BM003", "Club House Sandwich", "Sandwich 3 t·∫ßng v·ªõi g√† n∆∞·ªõng, bacon, rau s·ªëng v√† aioli", 85000.0, 50000.0, 18, LocalDate.now().plusDays(1), "American Deli"},
            new Object[]{"BM004", "B√°nh M√¨ Baguette Vi·ªát Nam", "B√°nh m√¨ truy·ªÅn th·ªëng Vi·ªát Nam v·ªõi th·ªãt ngu·ªôi v√† rau th∆°m", 35000.0, 20000.0, 30, LocalDate.now().plusDays(1), "Saigon Bakery"}
        );

        for (Object[] data : breadData) {
            createSanPham(data, SanPham.DanhMucSanPham.BANH_MI);
        }
    }

    /**
     * ‚òï T·∫°o 3 ƒê·ªì U·ªëng Premium
     */
    private void createDoUongProducts() {
        System.out.println("‚òï Creating premium beverages...");
        
        List<Object[]> drinkData = Arrays.asList(
            new Object[]{"DU001", "Espresso √ù ƒê·∫≠m ƒê√†", "Espresso t·ª´ h·∫°t Arabica rang medium, extraction 25s perfect crema", 35000.0, 15000.0, 50, LocalDate.now().plusDays(7), "Italian Coffee"},
            new Object[]{"DU002", "Tr√† S·ªØa Matcha Premium", "Tr√† s·ªØa matcha v·ªõi b·ªôt tr√† xanh Uji v√† pearls t∆∞∆°i", 65000.0, 35000.0, 30, LocalDate.now().plusDays(7), "Tea House"},
            new Object[]{"DU003", "Hot Chocolate B·ªâ", "Chocolate n√≥ng t·ª´ cocoa B·ªâ v·ªõi whipped cream v√† marshmallow", 55000.0, 30000.0, 25, LocalDate.now().plusDays(10), "Belgian Chocolate"}
        );

        for (Object[] data : drinkData) {
            createSanPham(data, SanPham.DanhMucSanPham.DO_UONG);
        }
    }

    /**
     * üç™ T·∫°o 2 B√°nh Quy Artisan
     */
    private void createBanhQuyProducts() {
        System.out.println("üç™ Creating artisan cookies...");
        
        List<Object[]> cookieData = Arrays.asList(
            new Object[]{"BQ001", "Cookie Chocolate Chip M·ªπ", "Cookies v·ªõi chocolate chips B·ªâ v√† vanilla Madagascar, n∆∞·ªõng gi√≤n", 25000.0, 12000.0, 40, LocalDate.now().plusDays(10), "American Cookies"},
            new Object[]{"BQ002", "B√°nh Quy B∆° ƒêan M·∫°ch", "Danish butter cookies truy·ªÅn th·ªëng trong h·ªôp thi·∫øc cao c·∫•p", 180000.0, 100000.0, 15, LocalDate.now().plusDays(30), "Danish Bakery"}
        );

        for (Object[] data : cookieData) {
            createSanPham(data, SanPham.DanhMucSanPham.BANH_QUY);
        }
    }

    /**
     * üèóÔ∏è Helper method ƒë·ªÉ t·∫°o s·∫£n ph·∫©m
     */
    private void createSanPham(Object[] data, SanPham.DanhMucSanPham danhMuc) {
        SanPham sanPham = new SanPham();
        sanPham.setMaSanPham((String) data[0]);
        sanPham.setTenSanPham((String) data[1]);
        sanPham.setMoTa((String) data[2]);
        sanPham.setDanhMuc(danhMuc);
        sanPham.setGiaBan((Double) data[3]);
        sanPham.setGiaVon((Double) data[4]);
        sanPham.setSoLuongTonKho((Integer) data[5]);
        sanPham.setHanSuDung((LocalDate) data[6]);
        sanPham.setNhaSanXuat((String) data[7]);
        sanPham.setSoLuongToiThieu(5);
        sanPham.setSoLuongDaBan(random.nextInt(15));
        
        sanPhamRepository.save(sanPham);
    }

    /**
     * üë• T·∫°o kh√°ch h√†ng m·∫´u
     */
    private void createSampleCustomers() {
        System.out.println("üë• Creating sample customers...");
        
        List<Object[]> customerData = Arrays.asList(
            new Object[]{"KH001", "Nguy·ªÖn VƒÉn Minh", LocalDate.of(1985, 3, 15), KhachHang.GioiTinh.NAM, "0901234567", "minh.nguyen@email.com", "123 ƒê∆∞·ªùng L√°ng, ƒê·ªëng ƒêa, H√† N·ªôi", "ƒê·ªëng ƒêa", 6500000.0, 12, "B√°nh kem chocolate"},
            new Object[]{"KH002", "Tr·∫ßn Th·ªã Hoa", LocalDate.of(1990, 7, 22), KhachHang.GioiTinh.NU, "0987654321", "hoa.tran@email.com", "456 Ph·ªë Hu·∫ø, Hai B√† Tr∆∞ng, H√† N·ªôi", "Hai B√† Tr∆∞ng", 2800000.0, 8, "Macaron"},
            new Object[]{"KH003", "L√™ ƒê·ª©c Th√†nh", LocalDate.of(1988, 12, 3), KhachHang.GioiTinh.NAM, "0912345678", "thanh.le@email.com", "789 Nguy·ªÖn Tr√£i, Thanh Xu√¢n, H√† N·ªôi", "Thanh Xu√¢n", 1650000.0, 5, "Croissant"},
            new Object[]{"KH004", "Ph·∫°m Th·ªã Lan", LocalDate.of(1992, 5, 18), KhachHang.GioiTinh.NU, "0923456789", "lan.pham@email.com", "321 Gi·∫£i Ph√≥ng, Ho√†ng Mai, H√† N·ªôi", "Ho√†ng Mai", 4750000.0, 10, "Tiramisu"},
            new Object[]{"KH005", "Ho√†ng VƒÉn ƒê·ª©c", LocalDate.of(1987, 9, üòé, KhachHang.GioiTinh.NAM, "0934567890", "duc.hoang@email.com", "654 T√¥ Hi·ªáu, C·∫ßu Gi·∫•y, H√† N·ªôi", "C·∫ßu Gi·∫•y", 920000.0, 3, "B√°nh m√¨"}
        );

        for (Object[] data : customerData) {
            KhachHang khachHang = new KhachHang();
            khachHang.setMaKhachHang((String) data[0]);
            khachHang.setHoTen((String) data[1]);
            khachHang.setNgaySinh((LocalDate) data[2]);
            khachHang.setGioiTinh((KhachHang.GioiTinh) data[3]);
            khachHang.setSoDienThoai((String) data[4]);
            khachHang.setEmail((String) data[5]);
            khachHang.setDiaChi((String) data[6]);
            khachHang.setKhuVuc((String) data[7]);
            khachHang.setTongChiTieu((Double) data[8]);
            khachHang.setSoLanMuaHang((Integer) data[9]);
            khachHang.setSanPhamYeuThich((String) data[10]);
            
            double tongChiTieu = (Double) data[8];
            khachHang.setDiemTichLuy((int) (tongChiTieu / 10000));
            khachHang.setGiaTriDonHangTrungBinh(tongChiTieu / (Integer) data[9]);
            khachHang.setLanMuaCuoi(LocalDate.now().minusDays(random.nextInt(30)));
            khachHang.capNhatLoaiKhachHang();
            
            khachHangRepository.save(khachHang);
        }
    }

    /**
     * üë®‚Äçüíº T·∫°o nh√¢n vi√™n m·∫´u
     */
    private void createSampleEmployees() {
        System.out.println("üë®‚Äçüíº Creating sample employees...");
        
        List<Object[]> employeeData = Arrays.asList(
            new Object[]{"NV001", "Nguy·ªÖn Th·ªã Qu·ª≥nh", LocalDate.of(1985, 5, 20), NhanVien.GioiTinh.NU, "0901111111", "quynh.manager@bakery.com", "H√† N·ªôi", NhanVien.PhongBan.QUAN_LY, NhanVien.ChucVu.GIAM_DOC, LocalDate.of(2020, 1, 15), 25000000.0, 75000000.0, 22},
            new Object[]{"NV002", "Tr·∫ßn VƒÉn H·∫£i", LocalDate.of(1990, 3, üòé, NhanVien.GioiTinh.NAM, "0902222222", "hai.sales@bakery.com", "H√† N·ªôi", NhanVien.PhongBan.BAN_HANG, NhanVien.ChucVu.TRUONG_PHONG, LocalDate.of(2021, 6, 1), 15000000.0, 35000000.0, 20},
            new Object[]{"NV003", "L√™ Th·ªã H∆∞∆°ng", LocalDate.of(1992, 8, 12), NhanVien.GioiTinh.NU, "0903333333", "huong.sales@bakery.com", "H√† N·ªôi", NhanVien.PhongBan.BAN_HANG, NhanVien.ChucVu.NHAN_VIEN_CHINH, LocalDate.of(2022, 3, 10), 12000000.0, 28000000.0, 21}
        );

        for (Object[] data : employeeData) {
            NhanVien nhanVien = new NhanVien();
            nhanVien.setMaNhanVien((String) data[0]);
            nhanVien.setHoTen((String) data[1]);
            nhanVien.setNgaySinh((LocalDate) data[2]);
            nhanVien.setGioiTinh((NhanVien.GioiTinh) data[3]);
            nhanVien.setSoDienThoai((String) data[4]);
            nhanVien.setEmail((String) data[5]);
            nhanVien.setDiaChi((String) data[6]);
            nhanVien.setPhongBan((NhanVien.PhongBan) data[7]);
            nhanVien.setChucVu((NhanVien.ChucVu) data[8]);
            nhanVien.setNgayVaoLam((LocalDate) data[9]);
            nhanVien.setLuongCoBan((Double) data[10]);
            nhanVien.setDoanhSoThang((Double) data[11]);
            nhanVien.setSoNgayLamViecThang((Integer) data[12]);
            nhanVien.setLoaiHopDong(NhanVien.LoaiHopDong.KHONG_XAC_DINH_THOI_HAN);
            nhanVien.setSoDonHangThang(random.nextInt(30) + 10);
            nhanVien.capNhatHieuSuat();
            
            nhanVienRepository.save(nhanVien);
        }
    }

    /**
     * üßæ T·∫°o giao d·ªãch m·∫´u
     */
    private void createSampleTransactions() {
        System.out.println("üßæ Creating sample transactions...");
        
        List<SanPham> sanPhams = sanPhamRepository.findAll();
        List<KhachHang> khachHangs = khachHangRepository.findAll();
        List<NhanVien> nhanViens = nhanVienRepository.findAll();

        for (int i = 1; i <= 10; i++) {
            GiaoDich giaoDich = new GiaoDich();
            giaoDich.setMaGiaoDich(String.format("GD2024120%02d", i));
            giaoDich.setLoaiGiaoDich(GiaoDich.LoaiGiaoDich.BAN_HANG);
            
            SanPham sanPham = sanPhams.get(random.nextInt(sanPhams.size()));
            KhachHang khachHang = khachHangs.get(random.nextInt(khachHangs.size()));
            NhanVien nhanVien = nhanViens.get(random.nextInt(nhanViens.size()));
            
            giaoDich.setSanPham(sanPham);
            giaoDich.setKhachHang(khachHang);
            giaoDich.setNhanVien(nhanVien);
            
            int soLuong = random.nextInt(3) + 1;
            giaoDich.setSoLuong(soLuong);
            giaoDich.setDonGia(sanPham.getGiaBan());
            
            GiaoDich.PhuongThucThanhToan[] phuongThucArray = GiaoDich.PhuongThucThanhToan.values();
            giaoDich.setPhuongThucThanhToan(phuongThucArray[random.nextInt(phuongThucArray.length)]);
            
            giaoDich.tinhToanGiaoDich();
            
            if (i <= üòé {
                giaoDich.setTrangThai(GiaoDich.TrangThaiGiaoDich.HOAN_THANH);
                giaoDich.setThoiGianHoanThanh(LocalDateTime.now().minusDays(random.nextInt(7)));
                giaoDich.hoanThanhGiaoDich();
            } else {
                giaoDich.setTrangThai(GiaoDich.TrangThaiGiaoDich.DANG_XU_LY);
            }
            
            giaoDichRepository.save(giaoDich);
        }
    }

    /**
     * üìä In summary chi ti·∫øt
     */
    private void printDetailedSummary() {
        System.out.println("\n" + "=".repeat(80));
        System.out.println("üéâ ENHANCED DATA SEEDING COMPLETED - 20 DIVERSE PRODUCTS!");
        System.out.println("=".repeat(80));
        
        System.out.println("üéÇ B√ÅNH KEM PREMIUM (6 products):");
        System.out.println("   ‚îú‚îÄ‚îÄ Tiramisu ƒê·∫∑c Bi·ªát - 180K‚Ç´");
        System.out.println("   ‚îú‚îÄ‚îÄ Red Velvet Luxury - 220K‚Ç´");
        System.out.println("   ‚îú‚îÄ‚îÄ Chocolate Truffle - 250K‚Ç´");
        System.out.println("   ‚îú‚îÄ‚îÄ Cheesecake Blueberry - 200K‚Ç´");
        System.out.println("   ‚îú‚îÄ‚îÄ Matcha Nh·∫≠t B·∫£n - 230K‚Ç´");
        System.out.println("   ‚îî‚îÄ‚îÄ D√¢u T√¢y Ph√°p - 190K‚Ç´");
        
        System.out.println("\nüßÅ B√ÅNH NG·ªåT & PASTRIES (5 products):");
        System.out.println("   ‚îú‚îÄ‚îÄ Croissant B∆° Ph√°p - 45K‚Ç´");
        System.out.println("   ‚îú‚îÄ‚îÄ Macaron Rainbow Set - 320K‚Ç´");
        System.out.println("   ‚îú‚îÄ‚îÄ √âclair Chocolate - 85K‚Ç´");
        System.out.println("   ‚îú‚îÄ‚îÄ Muffin Blueberry - 45K‚Ç´");
        System.out.println("   ‚îî‚îÄ‚îÄ Cupcake Double Chocolate - 38K‚Ç´");
        
        System.out.println("\nü•ñ B√ÅNH M√å SPECIALTY (4 products):");
        System.out.println("   ‚îú‚îÄ‚îÄ Croissant Jambon Fromage - 65K‚Ç´");
        System.out.println("   ‚îú‚îÄ‚îÄ Bagel C√° H·ªìi - 95K‚Ç´");
        System.out.println("   ‚îú‚îÄ‚îÄ Club House Sandwich - 85K‚Ç´");
        System.out.println("   ‚îî‚îÄ‚îÄ B√°nh M√¨ Baguette VN - 35K‚Ç´");
        
        System.out.println("\n‚òï ƒê·ªí U·ªêNG PREMIUM (3 products):");
        System.out.println("   ‚îú‚îÄ‚îÄ Espresso √ù - 35K‚Ç´");
        System.out.println("   ‚îú‚îÄ‚îÄ Tr√† S·ªØa Matcha - 65K‚Ç´");
        System.out.println("   ‚îî‚îÄ‚îÄ Hot Chocolate B·ªâ - 55K‚Ç´");
        
        System.out.println("\nüç™ B√ÅNH QUY ARTISAN (2 products):");
        System.out.println("   ‚îú‚îÄ‚îÄ Cookie Chocolate Chip - 25K‚Ç´");
        System.out.println("   ‚îî‚îÄ‚îÄ B√°nh Quy B∆° ƒêan M·∫°ch - 180K‚Ç´");
        
        System.out.println("\nüìä SUMMARY:");
        System.out.println("   üì¶ Total Products: " + sanPhamRepository.count());
        System.out.println("   üë• Total Customers: " + khachHangRepository.count());
        System.out.println("   üë®‚Äçüíº Total Employees: " + nhanVienRepository.count());
        System.out.println("   üßæ Total Transactions: " + giaoDichRepository.count());
        
        System.out.println("\nüåê ACCESS URLs:");
        System.out.println("   üè† Dashboard: http://localhost:8080/dashboard");
        System.out.println("   üõí Products: http://localhost:8080/sanpham");
        System.out.println("   üíæ H2 Console: http://localhost:8080/h2-console");
        System.out.println("\nüñºÔ∏è ALL PRODUCTS HAVE REAL IMAGES FROM UNSPLASH!");
        System.out.println("=".repeat(80) + "\n");
    }
}
localhost
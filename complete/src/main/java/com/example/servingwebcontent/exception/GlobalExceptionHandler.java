package com.example.servingwebcontent.exception;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.ui.Model;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.ConstraintViolationException;
import java.util.HashMap;
import java.util.Map;

/**
 * üõ°Ô∏è Global Exception Handler cho Bakery Management System
 * 
 * X·ª≠ l√Ω t·∫•t c·∫£ exception trong ·ª©ng d·ª•ng m·ªôt c√°ch th·ªëng nh·∫•t:
 * - Business exceptions v·ªõi th√¥ng b√°o user-friendly
 * - Validation errors v·ªõi chi ti·∫øt c·ª• th·ªÉ
 * - System errors v·ªõi logging ƒë·∫ßy ƒë·ªß
 * - 404 errors v·ªõi giao di·ªán ƒë·∫πp
 */
@ControllerAdvice
public class GlobalExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    /**
     * üîç X·ª≠ l√Ω NotFoundException (404)
     */
    @ExceptionHandler(NotFoundException.class)
    @ResponseStatus(HttpStatus.NOT_FOUND)
    public ModelAndView handleNotFoundException(NotFoundException ex, HttpServletRequest request) {
        logger.warn("üîç Not Found Exception: {} - URL: {}", ex.getMessage(), request.getRequestURL());
        
        ModelAndView mav = new ModelAndView("error/404");
        mav.addObject("errorMessage", ex.getMessage());
        mav.addObject("requestUrl", request.getRequestURL());
        mav.addObject("pageTitle", "Kh√¥ng T√¨m Th·∫•y - 404");
        return mav;
    }

    /**
     * üíº X·ª≠ l√Ω BusinessException (400)
     */
    @ExceptionHandler(BusinessException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ModelAndView handleBusinessException(BusinessException ex, HttpServletRequest request) {
        logger.warn("üíº Business Exception: {} - URL: {}", ex.getMessage(), request.getRequestURL());
        
        ModelAndView mav = new ModelAndView("error/business");
        mav.addObject("errorMessage", ex.getMessage());
        mav.addObject("errorType", "Business Error");
        mav.addObject("pageTitle", "L·ªói Nghi·ªáp V·ª•");
        return mav;
    }

    /**
     * üì¶ X·ª≠ l√Ω InsufficientStockException
     */
    @ExceptionHandler(InsufficientStockException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ModelAndView handleInsufficientStockException(InsufficientStockException ex, HttpServletRequest request) {
        logger.warn("üì¶ Insufficient Stock Exception: {} - URL: {}", ex.getMessage(), request.getRequestURL());
        
        ModelAndView mav = new ModelAndView("error/stock");
        mav.addObject("errorMessage", ex.getMessage());
        mav.addObject("errorType", "Inventory Error");
        mav.addObject("pageTitle", "Kh√¥ng ƒê·ªß H√†ng Trong Kho");
        return mav;
    }

    /**
     * ‚úÖ X·ª≠ l√Ω Validation Errors
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ModelAndView handleValidationException(MethodArgumentNotValidException ex, HttpServletRequest request) {
        logger.warn("‚úÖ Validation Exception - URL: {}", request.getRequestURL());
        
        Map<String, String> validationErrors = new HashMap<>();
        ex.getBindingResult().getFieldErrors().forEach(error -> {
            validationErrors.put(error.getField(), error.getDefaultMessage());
        });
        
        ModelAndView mav = new ModelAndView("error/validation");
        mav.addObject("validationErrors", validationErrors);
        mav.addObject("errorMessage", "D·ªØ li·ªáu nh·∫≠p v√†o kh√¥ng h·ª£p l·ªá");
        mav.addObject("pageTitle", "L·ªói Validation");
        return mav;
    }

    /**
     * üîí X·ª≠ l√Ω Constraint Violation Exception
     */
    @ExceptionHandler(ConstraintViolationException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ModelAndView handleConstraintViolationException(ConstraintViolationException ex, HttpServletRequest request) {
        logger.warn("üîí Constraint Violation Exception: {} - URL: {}", ex.getMessage(), request.getRequestURL());
        
        ModelAndView mav = new ModelAndView("error/validation");
        mav.addObject("errorMessage", "Vi ph·∫°m r√†ng bu·ªôc d·ªØ li·ªáu: " + ex.getMessage());
        mav.addObject("errorType", "Constraint Violation");
        mav.addObject("pageTitle", "L·ªói R√†ng Bu·ªôc D·ªØ Li·ªáu");
        return mav;
    }

    /**
     * üóÑÔ∏è X·ª≠ l√Ω Database Access Exception
     */
    @ExceptionHandler(org.springframework.dao.DataAccessException.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public ModelAndView handleDataAccessException(org.springframework.dao.DataAccessException ex, HttpServletRequest request) {
        logger.error("üóÑÔ∏è Database Access Exception: {} - URL: {}", ex.getMessage(), request.getRequestURL(), ex);
        
        ModelAndView mav = new ModelAndView("error/database");
        mav.addObject("errorMessage", "C√≥ l·ªói x·∫£y ra khi truy c·∫≠p c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.");
        mav.addObject("errorType", "Database Error");
        mav.addObject("pageTitle", "L·ªói C∆° S·ªü D·ªØ Li·ªáu");
        return mav;
    }

    /**
     * üîê X·ª≠ l√Ω Access Denied Exception
     */
    @ExceptionHandler(org.springframework.security.access.AccessDeniedException.class)
    @ResponseStatus(HttpStatus.FORBIDDEN)
    public ModelAndView handleAccessDeniedException(org.springframework.security.access.AccessDeniedException ex, HttpServletRequest request) {
        logger.warn("üîê Access Denied Exception: {} - URL: {}", ex.getMessage(), request.getRequestURL());
        
        ModelAndView mav = new ModelAndView("error/403");
        mav.addObject("errorMessage", "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y");
        mav.addObject("pageTitle", "T·ª´ Ch·ªëi Truy C·∫≠p - 403");
        return mav;
    }

    /**
     * ‚ö†Ô∏è X·ª≠ l√Ω IllegalArgumentException
     */
    @ExceptionHandler(IllegalArgumentException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ModelAndView handleIllegalArgumentException(IllegalArgumentException ex, HttpServletRequest request) {
        logger.warn("‚ö†Ô∏è Illegal Argument Exception: {} - URL: {}", ex.getMessage(), request.getRequestURL());
        
        ModelAndView mav = new ModelAndView("error/business");
        mav.addObject("errorMessage", "Tham s·ªë kh√¥ng h·ª£p l·ªá: " + ex.getMessage());
        mav.addObject("errorType", "Invalid Parameter");
        mav.addObject("pageTitle", "Tham S·ªë Kh√¥ng H·ª£p L·ªá");
        return mav;
    }

    /**
     * üî• X·ª≠ l√Ω t·∫•t c·∫£ exception kh√°c (500)
     */
    @ExceptionHandler(Exception.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public ModelAndView handleGenericException(Exception ex, HttpServletRequest request) {
        logger.error("üî• Internal Server Error: {} - URL: {}", ex.getMessage(), request.getRequestURL(), ex);
        
        ModelAndView mav = new ModelAndView("error/500");
        mav.addObject("errorMessage", "ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.");
        mav.addObject("errorType", "Internal Server Error");
        mav.addObject("exception", ex.getClass().getSimpleName());
        mav.addObject("pageTitle", "L·ªói H·ªá Th·ªëng - 500");
        return mav;
    }

    /**
     * üé® Helper method ƒë·ªÉ t·∫°o error response cho AJAX requests
     */
    private Map<String, Object> createErrorResponse(String message, String type, HttpStatus status) {
        Map<String, Object> errorResponse = new HashMap<>();
        errorResponse.put("success", false);
        errorResponse.put("message", message);
        errorResponse.put("type", type);
        errorResponse.put("status", status.value());
        errorResponse.put("timestamp", System.currentTimeMillis());
        return errorResponse;
    }
}